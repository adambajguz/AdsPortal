@using MagicModels.Components

@typeparam TOperation
@typeparam TResponse
@inherits GetPagedOperationRenderer<TOperation, TResponse>

@inject NavigationManager NavigationManager

<h2>@OperationSchema.DisplayName</h2>
<button @onclick="() => NavigationManager.NavigateTo(BasePath)">Go back</button>

@if (ErrorModel is not null)
{
    <p>@ErrorModel.ToString()</p>
}
else if (ResponseModel is null)
{
    <p>Loading...</p>
}
else
{
    <MagicModel Model="ResponseModel" Context="this" />

    if (ResponseModel is IPagedListResult info && info.LastPage != 0)
    {
        <p>@info.EntiresPerPage</p>

        if (info.CurrentPageNumber > 0)
        {
            <NavLink class="button" href="@(GetPageRoute(info, -1))">Previous page</NavLink>
        }

        if (info.CurrentPageNumber < info.LastPage)
        {
            <NavLink class="button" href="@(GetPageRoute(info, 1))">Next page</NavLink>
        }
    }
}

@code{
    private string GetPageRoute(IPagedListResult info, int modifier)
    {
        int p = info.CurrentPageNumber + modifier;

        if (p > info.LastPage)
            p = info.LastPage;

        if (p < 0)
            p = 0;

        Dictionary<string, string> args = new()
        {
            { nameof(GetPagedListQuery.EntiresPerPage), info.EntiresPerPage.ToString() },
            { nameof(GetPagedListQuery.Page), p.ToString() }
        };

        string route = GetRouteToThisOperation(args);

        return route;
    }
}