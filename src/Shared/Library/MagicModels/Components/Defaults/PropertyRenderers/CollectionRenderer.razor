@using System.Collections
@using MagicModels.Interfaces
@using MagicModels.Extensions

@inherits PropertyRenderer<IEnumerable>
@inject IModelRenderService RendererService

<p>@PropertySchema.DisplayName</p>

<table>
    <thead>
        <tr>
            @{
                var itemType = PropertySchema.Property.TryGetEnumerableArgumentUnderlyingType();
                var itemSchema = RendererService.GetSchema(itemType!);
            }

            @foreach (var itemPropertySchema in itemSchema.PropertySchemas)
            {
                <th>@itemPropertySchema.DisplayName</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (Value is null)
        {
            <tr>
                <td>Empty collection</td>
            </tr>
        }
        else
        {
            @foreach (var item in Value)
            {
                <tr>
                    <MagicModel Model="item" IsWrite="IsWrite" />
                </tr>
            }
        }
    </tbody>
</table>



